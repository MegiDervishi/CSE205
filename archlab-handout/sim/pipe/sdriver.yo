                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f40002000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f65801000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f72801000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Megi Dervishi megi.dervishi
                            | #
                            | # Instead of using subq or addq  I implement iaddq and reduce 
                            | # operations
                            | # Then i tried to do some loop unrolling to optimize but instead
                            | # it increased the number of operations
                            | #  
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 
                            | 
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax,%rax		# count = 0;
0x034: 6222                 | 	andq %rdx,%rdx		# len <= 0?
0x036: 712701000000000000   | 	jle Done		# if so, goto Done:
0x03f: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x049: 71fe00000000000000   | 	jle SpecialLoop
                            | 
0x052:                      | Loop:	
0x052: c0f20100000000000000 | 	iaddq $1, %rdx
0x05c: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x066: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x070: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x072: 718500000000000000   | 	jle Npos		    # if so, goto Npos:
0x07b: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 
0x085:                      | Npos:	
0x085: c0f70800000000000000 | 	iaddq $8, %rdi		# src++
0x08f: c0f60800000000000000 | 	iaddq $8, %rsi		# dst++
0x099:                      | L1:
0x099: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x0a3: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x0ad: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x0af: 71c200000000000000   | 	jle Npos2		    # if so, goto Npos:
0x0b8: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 		
0x0c2:                      | Npos2:	
0x0c2: c0f2feffffffffffffff | 	iaddq $-2, %rdx		# len-2
0x0cc: c0f70800000000000000 | 	iaddq $8, %rdi		# src++
0x0d6: c0f60800000000000000 | 	iaddq $8, %rsi		# dst++
0x0e0: 6222                 | 	andq %rdx,%rdx		# len > 0? 
0x0e2: 712701000000000000   | 	jle Done
0x0eb: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x0f5: 765200000000000000   | 	jg Loop
                            | 
                            | 
0x0fe:                      | SpecialLoop:	
0x0fe: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x108: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x112: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x114: 712701000000000000   | 	jle Done		    # if so, goto Npos:
0x11d: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x127:                      | Done:
0x127: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x128:                      | End:
                            | #/* $end ncopy-ys */
0x128:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x128:                      | 	.align 8
0x128:                      | src:
0x128: 0100000000000000     | 	.quad 1
0x130: 0200000000000000     | 	.quad 2
0x138: fdffffffffffffff     | 	.quad -3
0x140: fcffffffffffffff     | 	.quad -4
0x148: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x150:                      | 	.align 16
0x150:                      | Predest:
0x150: fadebc0000000000     | 	.quad 0xbcdefa
0x158:                      | dest:
0x158: abefcd0000000000     | 	.quad 0xcdefab
0x160: abefcd0000000000     | 	.quad 0xcdefab
0x168: abefcd0000000000     | 	.quad 0xcdefab
0x170: abefcd0000000000     | 	.quad 0xcdefab
0x178:                      | Postdest:
0x178: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x180:                      | .align 8
                            | # Run time stack
0x180: 0000000000000000     | 	.quad 0
0x188: 0000000000000000     | 	.quad 0
0x190: 0000000000000000     | 	.quad 0
0x198: 0000000000000000     | 	.quad 0
0x1a0: 0000000000000000     | 	.quad 0
0x1a8: 0000000000000000     | 	.quad 0
0x1b0: 0000000000000000     | 	.quad 0
0x1b8: 0000000000000000     | 	.quad 0
0x1c0: 0000000000000000     | 	.quad 0
0x1c8: 0000000000000000     | 	.quad 0
0x1d0: 0000000000000000     | 	.quad 0
0x1d8: 0000000000000000     | 	.quad 0
0x1e0: 0000000000000000     | 	.quad 0
0x1e8: 0000000000000000     | 	.quad 0
0x1f0: 0000000000000000     | 	.quad 0
0x1f8: 0000000000000000     | 	.quad 0
                            | 
0x200:                      | Stack:
