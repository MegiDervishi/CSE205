                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4b805000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f63803000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f72801000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Megi Dervishi megi.dervishi
                            | #
                            | # Instead of using subq or addq  I implement iaddq and reduce 
                            | # operations
                            | # Then i tried to do some loop unrolling to optimize but instead
                            | # it increased the number of operations
                            | #  
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 
                            | 
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax,%rax		# count = 0;
0x034: 6222                 | 	andq %rdx,%rdx		# len <= 0?
0x036: 712701000000000000   | 	jle Done		# if so, goto Done:
0x03f: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x049: 71fe00000000000000   | 	jle SpecialLoop
                            | 
0x052:                      | Loop:	
0x052: c0f20100000000000000 | 	iaddq $1, %rdx
0x05c: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x066: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x070: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x072: 718500000000000000   | 	jle Npos		    # if so, goto Npos:
0x07b: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 
0x085:                      | Npos:	
0x085: c0f70800000000000000 | 	iaddq $8, %rdi		# src++
0x08f: c0f60800000000000000 | 	iaddq $8, %rsi		# dst++
0x099:                      | L1:
0x099: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x0a3: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x0ad: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x0af: 71c200000000000000   | 	jle Npos2		    # if so, goto Npos:
0x0b8: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 		
0x0c2:                      | Npos2:	
0x0c2: c0f2feffffffffffffff | 	iaddq $-2, %rdx		# len-2
0x0cc: c0f70800000000000000 | 	iaddq $8, %rdi		# src++
0x0d6: c0f60800000000000000 | 	iaddq $8, %rsi		# dst++
0x0e0: 6222                 | 	andq %rdx,%rdx		# len > 0? 
0x0e2: 712701000000000000   | 	jle Done
0x0eb: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x0f5: 765200000000000000   | 	jg Loop
                            | 
                            | 
0x0fe:                      | SpecialLoop:	
0x0fe: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x108: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x112: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x114: 712701000000000000   | 	jle Done		    # if so, goto Npos:
0x11d: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x127:                      | Done:
0x127: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x128:                      | End:
                            | #/* $end ncopy-ys */
0x128:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x128:                      | 	.align 8
0x128:                      | src:
0x128: 0100000000000000     | 	.quad 1
0x130: 0200000000000000     | 	.quad 2
0x138: 0300000000000000     | 	.quad 3
0x140: 0400000000000000     | 	.quad 4
0x148: fbffffffffffffff     | 	.quad -5
0x150: 0600000000000000     | 	.quad 6
0x158: 0700000000000000     | 	.quad 7
0x160: 0800000000000000     | 	.quad 8
0x168: f7ffffffffffffff     | 	.quad -9
0x170: 0a00000000000000     | 	.quad 10
0x178: 0b00000000000000     | 	.quad 11
0x180: f4ffffffffffffff     | 	.quad -12
0x188: 0d00000000000000     | 	.quad 13
0x190: 0e00000000000000     | 	.quad 14
0x198: f1ffffffffffffff     | 	.quad -15
0x1a0: f0ffffffffffffff     | 	.quad -16
0x1a8: efffffffffffffff     | 	.quad -17
0x1b0: 1200000000000000     | 	.quad 18
0x1b8: edffffffffffffff     | 	.quad -19
0x1c0: 1400000000000000     | 	.quad 20
0x1c8: 1500000000000000     | 	.quad 21
0x1d0: 1600000000000000     | 	.quad 22
0x1d8: 1700000000000000     | 	.quad 23
0x1e0: 1800000000000000     | 	.quad 24
0x1e8: 1900000000000000     | 	.quad 25
0x1f0: e6ffffffffffffff     | 	.quad -26
0x1f8: 1b00000000000000     | 	.quad 27
0x200: e4ffffffffffffff     | 	.quad -28
0x208: 1d00000000000000     | 	.quad 29
0x210: 1e00000000000000     | 	.quad 30
0x218: 1f00000000000000     | 	.quad 31
0x220: e0ffffffffffffff     | 	.quad -32
0x228: 2100000000000000     | 	.quad 33
0x230: 2200000000000000     | 	.quad 34
0x238: ddffffffffffffff     | 	.quad -35
0x240: 2400000000000000     | 	.quad 36
0x248: 2500000000000000     | 	.quad 37
0x250: daffffffffffffff     | 	.quad -38
0x258: 2700000000000000     | 	.quad 39
0x260: 2800000000000000     | 	.quad 40
0x268: d7ffffffffffffff     | 	.quad -41
0x270: 2a00000000000000     | 	.quad 42
0x278: d5ffffffffffffff     | 	.quad -43
0x280: d4ffffffffffffff     | 	.quad -44
0x288: 2d00000000000000     | 	.quad 45
0x290: 2e00000000000000     | 	.quad 46
0x298: d1ffffffffffffff     | 	.quad -47
0x2a0: d0ffffffffffffff     | 	.quad -48
0x2a8: cfffffffffffffff     | 	.quad -49
0x2b0: ceffffffffffffff     | 	.quad -50
0x2b8: cdffffffffffffff     | 	.quad -51
0x2c0: ccffffffffffffff     | 	.quad -52
0x2c8: cbffffffffffffff     | 	.quad -53
0x2d0: caffffffffffffff     | 	.quad -54
0x2d8: c9ffffffffffffff     | 	.quad -55
0x2e0: c8ffffffffffffff     | 	.quad -56
0x2e8: c7ffffffffffffff     | 	.quad -57
0x2f0: c6ffffffffffffff     | 	.quad -58
0x2f8: c5ffffffffffffff     | 	.quad -59
0x300: c4ffffffffffffff     | 	.quad -60
0x308: c3ffffffffffffff     | 	.quad -61
0x310: c2ffffffffffffff     | 	.quad -62
0x318: c1ffffffffffffff     | 	.quad -63
0x320: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x330:                      | 	.align 16
0x330:                      | Predest:
0x330: fadebc0000000000     | 	.quad 0xbcdefa
0x338:                      | dest:
0x338: abefcd0000000000     | 	.quad 0xcdefab
0x340: abefcd0000000000     | 	.quad 0xcdefab
0x348: abefcd0000000000     | 	.quad 0xcdefab
0x350: abefcd0000000000     | 	.quad 0xcdefab
0x358: abefcd0000000000     | 	.quad 0xcdefab
0x360: abefcd0000000000     | 	.quad 0xcdefab
0x368: abefcd0000000000     | 	.quad 0xcdefab
0x370: abefcd0000000000     | 	.quad 0xcdefab
0x378: abefcd0000000000     | 	.quad 0xcdefab
0x380: abefcd0000000000     | 	.quad 0xcdefab
0x388: abefcd0000000000     | 	.quad 0xcdefab
0x390: abefcd0000000000     | 	.quad 0xcdefab
0x398: abefcd0000000000     | 	.quad 0xcdefab
0x3a0: abefcd0000000000     | 	.quad 0xcdefab
0x3a8: abefcd0000000000     | 	.quad 0xcdefab
0x3b0: abefcd0000000000     | 	.quad 0xcdefab
0x3b8: abefcd0000000000     | 	.quad 0xcdefab
0x3c0: abefcd0000000000     | 	.quad 0xcdefab
0x3c8: abefcd0000000000     | 	.quad 0xcdefab
0x3d0: abefcd0000000000     | 	.quad 0xcdefab
0x3d8: abefcd0000000000     | 	.quad 0xcdefab
0x3e0: abefcd0000000000     | 	.quad 0xcdefab
0x3e8: abefcd0000000000     | 	.quad 0xcdefab
0x3f0: abefcd0000000000     | 	.quad 0xcdefab
0x3f8: abefcd0000000000     | 	.quad 0xcdefab
0x400: abefcd0000000000     | 	.quad 0xcdefab
0x408: abefcd0000000000     | 	.quad 0xcdefab
0x410: abefcd0000000000     | 	.quad 0xcdefab
0x418: abefcd0000000000     | 	.quad 0xcdefab
0x420: abefcd0000000000     | 	.quad 0xcdefab
0x428: abefcd0000000000     | 	.quad 0xcdefab
0x430: abefcd0000000000     | 	.quad 0xcdefab
0x438: abefcd0000000000     | 	.quad 0xcdefab
0x440: abefcd0000000000     | 	.quad 0xcdefab
0x448: abefcd0000000000     | 	.quad 0xcdefab
0x450: abefcd0000000000     | 	.quad 0xcdefab
0x458: abefcd0000000000     | 	.quad 0xcdefab
0x460: abefcd0000000000     | 	.quad 0xcdefab
0x468: abefcd0000000000     | 	.quad 0xcdefab
0x470: abefcd0000000000     | 	.quad 0xcdefab
0x478: abefcd0000000000     | 	.quad 0xcdefab
0x480: abefcd0000000000     | 	.quad 0xcdefab
0x488: abefcd0000000000     | 	.quad 0xcdefab
0x490: abefcd0000000000     | 	.quad 0xcdefab
0x498: abefcd0000000000     | 	.quad 0xcdefab
0x4a0: abefcd0000000000     | 	.quad 0xcdefab
0x4a8: abefcd0000000000     | 	.quad 0xcdefab
0x4b0: abefcd0000000000     | 	.quad 0xcdefab
0x4b8: abefcd0000000000     | 	.quad 0xcdefab
0x4c0: abefcd0000000000     | 	.quad 0xcdefab
0x4c8: abefcd0000000000     | 	.quad 0xcdefab
0x4d0: abefcd0000000000     | 	.quad 0xcdefab
0x4d8: abefcd0000000000     | 	.quad 0xcdefab
0x4e0: abefcd0000000000     | 	.quad 0xcdefab
0x4e8: abefcd0000000000     | 	.quad 0xcdefab
0x4f0: abefcd0000000000     | 	.quad 0xcdefab
0x4f8: abefcd0000000000     | 	.quad 0xcdefab
0x500: abefcd0000000000     | 	.quad 0xcdefab
0x508: abefcd0000000000     | 	.quad 0xcdefab
0x510: abefcd0000000000     | 	.quad 0xcdefab
0x518: abefcd0000000000     | 	.quad 0xcdefab
0x520: abefcd0000000000     | 	.quad 0xcdefab
0x528: abefcd0000000000     | 	.quad 0xcdefab
0x530:                      | Postdest:
0x530: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x538:                      | .align 8
                            | # Run time stack
0x538: 0000000000000000     | 	.quad 0
0x540: 0000000000000000     | 	.quad 0
0x548: 0000000000000000     | 	.quad 0
0x550: 0000000000000000     | 	.quad 0
0x558: 0000000000000000     | 	.quad 0
0x560: 0000000000000000     | 	.quad 0
0x568: 0000000000000000     | 	.quad 0
0x570: 0000000000000000     | 	.quad 0
0x578: 0000000000000000     | 	.quad 0
0x580: 0000000000000000     | 	.quad 0
0x588: 0000000000000000     | 	.quad 0
0x590: 0000000000000000     | 	.quad 0
0x598: 0000000000000000     | 	.quad 0
0x5a0: 0000000000000000     | 	.quad 0
0x5a8: 0000000000000000     | 	.quad 0
0x5b0: 0000000000000000     | 	.quad 0
                            | 
0x5b8:                      | Stack:
